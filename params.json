{
  "name": "Swishdbgext",
  "tagline": "Incident Response & Digital Forensics Debugging Extension",
  "body": "#SwishDbgExt\r\n===========\r\n\r\nSwishDbgExt is a Microsoft WinDbg debugging extension that expands the set of available commands by Microsoft WinDbg, but also fixes and improves existing commands.\r\nThis extension has been developed by Matt Suiche (@msuiche) – feel free to reach out on support@comae.io ask for more features, offer to contribute and/or report bugs.\r\n\r\nSwishDbgExt aims at making life easier for kernel developers, troubleshooters and security experts with a series of debugging, incident response and memory forensics commands.\r\nBecause SwishDbgExt is a WinDbg debugging extension, it means it can be used on local or remote kernel debugging session, live sessions generated by Microsoft LiveKd, but also on Microsoft crash dumps generated to a Blue Screen of Death or hybrid utilities such as Comae DumpIt.\r\n\r\n## 2016 Contest\r\n### Prizes\r\n- 1st place — 1500 USD cash\r\n- 2nd place — 1000 USD cash\r\n- 3rd place — 500 USD cash\r\n- 4th and 5th place — Comae t-shirt.\r\n\r\n### Goal\r\nCreate a neat and useful command to add to SwishDbgExt WinDbg extension. C++ and ExtRemoteTyped are your best friend.\r\n###Deadline\r\n31 December 2016 — and results will be published within 30 days.\r\n### Submission\r\nFork the github repository, and provide the link to your branch over email at support@comae.io - More information on https://blog.comae.io/comae-2016-contest-swishdbgext-features-3c9a63c62209#.tnt1b9usx\r\n\r\n## Installation\r\nYou can either copy the WinDbg extension in the corresponding (x86 or x64) WinDbg folder or load it manually using the !load command such as below. Please note you can’t have spaces or quotes in the full path to the target dll to be loaded.\r\n`!load X:\\FullPath\\SwishDbgExt.dll`\r\n\r\n###Example:\r\n```\r\nkd> !load E:\\projects\\labs\\SwishDbgExt\\bin\\x64\\SwishDbgExt.dll;\r\n       SwishDbgExt v0.7.0 (Nov  2 2016) - Incident Response & Digital Forensics Debugging Extension\r\n       SwishDbgExt Copyright (C) 2016 Comae Technologies FZE - http://www.comae.io\r\n       SwishDbgExt Copyright (C) 2014-2016 Matthieu Suiche (@msuiche)\r\n\r\n       This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\r\n       This is free software, and you are welcome to redistribute it\r\n       under certain conditions; type `show c' for details.\r\n```\r\n\t   \r\nIf you wish to update your WinDbg template with a more DML-friendly template, you can directly import windbg_template.reg file joined to the package.\r\n\r\n## TODO\r\n- [ ] Define structures\r\n- [ ] Define Commands\r\n- [ ] Announce feature contest.\r\n\r\n## Commands\r\n### !SwishDbgExt.help\r\nDisplays information on available extension commands.\r\n\r\nThis command will give you the list of all commands if you specify no argument, will give you the list of parameters for an existing command if specified as an argument.\r\n\r\n### !ms_callbacks     \r\nDisplay callback functions\r\n\r\n### !ms_checkcodecave \r\nLook for used code cave\r\n\r\n### !ms_consoles      \r\nDisplay console command's history \r\n\r\n### !ms_credentials\r\nDisplay user's credentials (based on gentilwiki's mimikatz) \r\n### !ms_drivers\r\nDisplay list of drivers.\r\n!ms_drivers will go ahead and display a list of drivers that are currently loaded.\r\nIn this example, here’s a few of the drivers loaded at the time of the crash in this kernel-dump:\r\nWith this command, we can also view in-depth IRP information regarding a driver:\r\nIn the above image we can see the driver-specific I/O stack location within e1cexpress.sys’ IRP. Here we can see function codes such as IRP_MJ_CREATE which opens the target device object, indicating that it is present and available for I/O operations.\r\n\r\n### !ms_dump\r\nDump memory space on disk\r\n\r\n### !ms_exqueue\r\nDisplay Ex queued workers.\r\n\r\n`!exqueue` doesn’t work properly on Windows 8, so a working version needed to be implemented. Just like the original command this one dispaly the working threads queue.\r\n\r\n### !ms_fixit\r\nReset segmentation in WinDbg (Fix \"16.kd>\")\r\n\r\n### !ms_gdt\r\nDisplay GDT.\r\n\r\n!ms_gdt displays the Global Descriptor Table. Note on x64 that every selector is flat (0x0000000000000000 to 0xFFFFFFFFFFFFFFFF). This command can be extra helpful to check for any suspected hooking of the GDT, as attempting to do so on x64 will call a bug check. This is because x64 forbids hooking of the GDT.\r\n\r\n### !ms_hivelist\r\nDisplay list of registry hives.\r\n\r\n`ms_hivelist` displays a list of registry hives.\r\nWe can look directly into a hive (\\Registry\\Machine\\Software for example) to see its subkeys, values, etc:\r\n\r\n### !ms_idt\r\nDisplay IDT.\r\n\r\n`!ms_idt` displays the Interrupt descriptor table. Very much like the GDT, if the IDT is hooked on an x64 system, it will call a bug check. This is due to the fact that Microsoft implemented (programmatically) a prevention of hooking the IDT with a kernel-mode driver that would normally intercept calls to the IDT and then add in its own processing. This is why in the above image, there is ‘No’ as far as the eye can see.\r\n\r\n### !ms_malscore\r\nAnalyze a memory space and returns a Malware Score Index (MSI) - (based on Frank Boldewin's work)\r\n\r\n### !ms_mbr\r\nScan Master Boot Record (MBR)\r\n\r\n### !ms_netstat\r\nDisplay network information (sockets, connections, ...)\r\n\r\n### !ms_object\r\nDisplay list of object\r\n\r\n### !ms_process\r\nDisplay list of processes.\r\n`!ms_process` is an improved version of `!process` and `!dml_proc`..\r\nOne of the nice thing as you can notice below is the usage of DML (Debugger Markup Language) with the commands. All the underline commands are in fact links to commands.\r\nAs an example below, you can see the output of /vads /scan, to scan VAD (Virtual Address Descriptors). You can notice that one column gives the “Malware Score Index” which can be useful to detect shellcodes or heap-spray.\r\nIn the screenshot below, you can see an abnormally high score in several VADs – due to usage of heap spray. Just by clicking on the score it will run the scanning algorithm.\r\nThe scanning algorithm is based on Frank Boldewin’s OfficeMalScanner utility.\r\nAnd returns you information about where the shellcode is:\r\n`/scan` option can also be used on exported functions to know if the EAT (Export Address Table) has been patched or if the prolog of the function modified.\r\n\r\nSimilar tests are available for the SSDT (`!ms_ssdt`).\r\n\r\n### !ms_readkcb\r\nRead key control block\r\n\r\n### !ms_readknode\r\nRead key node.\r\n`!reg` WinDbg command has been a frustration for a long time, due to some bugs. This is why SwishDbgExt, has its own registry explorer functions to try to make access to registry data as simple as possible.\r\n\r\n### !ms_readkvalue\r\nRead key value\r\n\r\n### !ms_scanndishook\r\nScan and display suspicious NDIS hooks\r\n\r\n### !ms_services\r\nDisplay list of services\r\n\r\n### !ms_ssdt\r\nDisplay service descriptor table (SDT) functions.\r\n`!ms_ssdt` displays the System Service Dispatch Table. This command is extremely helpful in the investigation of suspected rootkit hooks through what is known as Direct Kernel Object Manipulation (DKOM). If you see a low level routine here that is hooked (such as nt!NtEnumerateKey), this can aid you in your analysis regarding a possible rootkit infection.\r\n\r\n### !ms_store\r\nDisplay information related to the Store Manager (ReadyBoost).\r\n\r\nThe present command allows to list the current ReadyBoost (requires USB 3.0) cache used by the Operating System, but also to display the logs of the memory pages managed by the store manager.\r\nParameter: /cache\r\n\r\n### !ms_timers\r\nDisplay list of KTIMER.\r\n\r\n!ms_timers displays the KTIMER structure, which is an opaque structure that represents and contains various timer objects. This command can be helpful to figure out what drivers created what timer objects, what drivers called what routines, etc.\r\n\r\n### !ms_vacbs\r\nDisplay list of cached VACBs\r\n\r\n### !ms_verbose\r\nTurn verbose mode on/off\r\n\r\n## Classes\r\n### PEFile\r\n`MsPEImageFile` contains the basic common information used by Windows binaries (PE) and has been derivated into three different classes:\r\n\r\n- MsProcessObject\r\n- MsDllObject\r\n- MsDriverObject\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}